class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        self.matrix = matrix
        self.m = len(matrix)   # row
        self.n = len(matrix[0]) # column
        
        ### Change the way you do the initialization
        # matrix_sum[a][b] = sum of the elements in matrix [0...a][0...b]
        self.dp = [[0] + nums for nums in matrix]
        self.dp.insert(0, [0] * (len(matrix[0]) + 1))

        
        for i in range(1, len(matrix) + 1, 1):
            for j in range(1, len(matrix[0]) + 1, 1):
                self.dp[i][j] += self.dp[i-1][j] + self.dp[i][j-1] - self.dp[i-1][j-1]

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        # print(self.matrix_sum)
        ### first: (row2, col2)
        ### second: (row2, col1-1)
        ### thrid: (row1 - 1, col2)
        ### forth: ((row1-1, col1-1))
        return self.dp[row2+1][col2+1] - self.dp[row2+1][col1] - self.dp[row1][col2+1] + self.dp[row1][col1]
        


# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
